version: '3.8'

#La soluzione e' composta da 3 containers principali.
#
#Un primo container "web" predisposto per la gestione dell'applicativo vero e proprio. Non pubblica
#direttamente i propri servizi all'esterno e gira gunicorn
#
#Un secondo container "db" predisposto per l'esecuzione vanilla di un postgres di servizio, con volume
#persistente ovviamente. In questo caso espone anche il database all'esterno e l'ho mantenuto per motivi
#di praticita'. Un improvement puo' essere ovviamente quello di cambiare ports in expose, operazione da 5 minuti
#
#Un terzo container "nginx" che gira un nginx proxy vanilla con un conf elaborato ad hoc per servire gunicorn
#e servire i staticfiles
#


services:
  web:
    build: ./    
    command: gunicorn mysite.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - static_volume:/home/app/web/staticfiles      
    expose:
      - 8000
    env_file:
      - ./.env.dev

  db:
    image: postgres:14.15
    volumes:
      - pegaso_postgres_data:/var/lib/postgresql/data/
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=booking_backend
      - POSTGRES_PASSWORD=GuessIt123
      - POSTGRES_DB=booking

  nginx:
    build: ./nginx
    ports:
      - 1337:80
    volumes:
      - static_volume:/home/app/web/staticfiles
    depends_on:
      - web  

volumes:
  pegaso_postgres_data:
  static_volume: